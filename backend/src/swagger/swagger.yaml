openapi: 3.0.3
info:
  title: Documentação API de Gerenciamento de Usuários e Administradores
  description: |-
    A API de Gerenciamento de Pessoas é uma interface de programação de aplicativos 
    RESTful projetada para gerenciar informações de indivíduos e administradores em um sistema. 
    Ela fornece um conjunto completo de operações CRUD (Criar, Ler, Atualizar e Deletar) 
    que permitem interagir com os dados de pessoas e administradores de maneira eficiente e segura. 
    A API é construída utilizando práticas modernas de desenvolvimento web, garantindo 
    escalabilidade, segurança e facilidade de manutenção.
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/license/mit
servers:
  - url: http://localhost:3000
    description: Localhost
tags:
  - name: Usuarios
    description: API de gerenciamento de usuários
  - name: Administradores
    description: API de gerenciamento de administradores
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nome:
          type: string
          example: Fulano
        email:
          type: string
          example: fulano@email.com
        telefone:
          type: string
          example: 84999999999
        cpf:
          type: string
          example: 123.456.789-12
        endereco:
          type: string
          example: Rua Tal, 123
        data_nascimento:
          type: string
          format: date
          example: 1990-12-31
        senha:
          type: string
          example: senha123
        status:
          type: string
          enum:
            - ativo
            - inativo
          example: ativo
        foto_perfil:
          type: string
          format: binary
        api_key:
          type: string
    UsuarioInput:
      type: object
      properties:
        nome:
          type: string
        email:
          type: string
        telefone:
          type: string
        cpf:
          type: string
        endereco:
          type: string
        data_nascimento:
          type: string
          format: date
        senha:
          type: string
        status:
          type: string
          enum:
            - ativo
            - inativo
        foto_perfil:
          type: string
          format: binary
    Administrador:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nome:
          type: string
          example: Administrador Fulano
        email:
          type: string
          example: admin@fulano.com
        telefone:
          type: string
          example: 84999999999
        cpf:
          type: string
          example: 123.456.789-12
        endereco:
          type: string
          example: Rua Tal, 123
        data_nascimento:
          type: string
          format: date
          example: 1985-05-15
        senha:
          type: string
          example: admin123
        status:
          type: string
          enum:
            - ativo
            - inativo
          example: ativo
        foto_perfil:
          type: string
          format: binary
        api_key:
          type: string
    AdministradorInput:
      type: object
      properties:
        nome:
          type: string
        email:
          type: string
        telefone:
          type: string
        cpf:
          type: string
        endereco:
          type: string
        data_nascimento:
          type: string
          format: date
        senha:
          type: string
        status:
          type: string
          enum:
            - ativo
            - inativo
        foto_perfil:
          type: string
          format: binary
paths:
  /api/usuario:
    get:
      tags:
        - Usuarios
      summary: Listar todos os usuários
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista todos os usuários no banco de dados
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
        '500':
          description: Erro ao listar usuários
    post:
      tags:
        - Usuarios
      summary: Cadastrar um usuário
      description: Adiciona um novo usuário ao banco de dados
      requestBody:
        required: true
        content: 
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '201':
          description: Usuário criado com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '500':
          description: Erro ao cadastrar usuário!
    delete:
      tags:
        - Usuarios
      summary: Deletar todos os usuários
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Todos os usuários deletados com sucesso
        '500':
          description: Erro ao deletar usuários
  /api/usuario/{id}:
    get:
      tags:
        - Usuarios
      summary: Buscar um usuário pelo ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro ao buscar usuário
    put:
      tags:
        - Usuarios
      summary: Atualizar um usuário pelo ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '200':
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro ao atualizar usuário
    delete:
      tags:
        - Usuarios
      summary: Deletar um usuário pelo ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuário deletado com sucesso
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro ao deletar usuário
  /api/administrador:
    get:
      tags:
        - Administradores
      summary: Listar todos os administradores
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista todos os administradores no banco de dados
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Administrador'
        '500':
          description: Erro ao listar administradores
    post:
      tags:
        - Administradores
      summary: Cadastrar um administrador
      description: Adiciona um novo administrador ao banco de dados
      requestBody:
        required: true
        content: 
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdministradorInput'
      responses:
        '201':
          description: Administrador criado com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Administrador'
        '500':
          description: Erro ao cadastrar administrador!
    delete:
      tags:
        - Administradores
      summary: Deletar todos os administradores
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Todos os administradores deletados com sucesso
        '500':
          description: Erro ao deletar administradores
  /api/administrador/{id}:
    get:
      tags:
        - Administradores
      summary: Buscar um administrador pelo ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Administrador encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Administrador'
        '404':
          description: Administrador não encontrado
        '500':
          description: Erro ao buscar administrador
    put:
      tags:
        - Administradores
      summary: Atualizar um administrador pelo ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdministradorInput'
      responses:
        '200':
          description: Administrador atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Administrador'
        '404':
          description: Administrador não encontrado
        '500':
          description: Erro ao atualizar administrador
    delete:
      tags:
        - Administradores
      summary: Deletar um administrador pelo ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Administrador deletado com sucesso
        '404':
          description: Administrador não encontrado
        '500':
          description: Erro ao deletar administrador
  /api/login:
    post:
      tags:
        - Usuarios
      summary: Realizar login do usuário
      description: Realiza login do usuário e retorna um token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: fulano@email.com
                senha:
                  type: string
                  example: senha123
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Credenciais inválidas
        '500':
          description: Erro no servidor
